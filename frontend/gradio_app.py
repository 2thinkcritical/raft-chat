import logging
import os
from datetime import datetime
from typing import Any

import gradio as gr
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ nginx
API_BASE_URL = os.getenv("API_BASE_URL", "http://nginx/api")


def send_message(message: str) -> tuple[str, list[list[str]]]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º

    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        Tuple —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞) –∏ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    if not message.strip():
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return "", []

    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message[:50]}{'...' if len(message) > 50 else ''}'"
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "text": message,
            "timestamp": datetime.now().isoformat(),
            "user_id": "user",
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
        response = requests.post(
            f"{API_BASE_URL}/chat",
            json=message_data,
            headers={"Content-Type": "application/json"},
        )

        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å –±—ç–∫–µ–Ω–¥–∞
            history_response = requests.get(f"{API_BASE_URL}/history")
            if history_response.status_code == 200:
                history_data = history_response.json()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gradio
                chat_messages = []
                for item in history_data:
                    timestamp = datetime.fromisoformat(
                        item["timestamp"].replace("Z", "+00:00")
                    )
                    formatted_time = timestamp.strftime("%H:%M:%S")
                    chat_messages.append(
                        [f"[{formatted_time}] –í—ã", item["user_message"]]
                    )
                    chat_messages.append(
                        [f"[{formatted_time}] –î–æ–∫—É–º–µ–Ω—Ç", item["bot_response"]]
                    )

                return "", chat_messages
            else:
                error_message = [
                    [
                        "–°–∏—Å—Ç–µ–º–∞",
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {history_response.status_code}",
                    ]
                ]
                return "", error_message
        else:
            error_message = [
                ["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}"]
            ]
            return "", error_message

    except requests.exceptions.RequestException as e:
        error_message = [["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}"]]
        return "", error_message
    except Exception as e:
        error_message = [["–°–∏—Å—Ç–µ–º–∞", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"]]
        return "", error_message


def load_chat_history() -> list[list[str]]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –±—ç–∫–µ–Ω–¥–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Gradio
    """
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å backend")
    try:
        response = requests.get(f"{API_BASE_URL}/history")
        logger.info(f"GET /history - —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            history_data = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(history_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Gradio
            chat_messages = []
            for item in history_data:
                timestamp = datetime.fromisoformat(
                    item["timestamp"].replace("Z", "+00:00")
                )
                formatted_time = timestamp.strftime("%H:%M:%S")
                chat_messages.append([f"[{formatted_time}] –í—ã", item["user_message"]])
                chat_messages.append(
                    [f"[{formatted_time}] –î–æ–∫—É–º–µ–Ω—Ç", item["bot_response"]]
                )

            logger.info(
                f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(chat_messages)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Gradio"
            )
            return chat_messages
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: HTTP {response.status_code}")
            return [["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}"]]
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {str(e)}")
        return [["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"]]


def clear_chat() -> list[list[str]]:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ

    Returns:
        –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        response = requests.delete(f"{API_BASE_URL}/history")
        if response.status_code == 200:
            return []
        else:
            return [["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}"]]
    except Exception as e:
        return [["–°–∏—Å—Ç–µ–º–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"]]


def get_document_info() -> tuple[str, str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å –±—ç–∫–µ–Ω–¥–∞

    Returns:
        Tuple —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞
    """
    logger.info(
        f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–∑: {API_BASE_URL}/document-info"
    )
    try:
        response = requests.get(f"{API_BASE_URL}/document-info")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}")

        if response.status_code == 200:
            doc_info: dict[str, Any] = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {doc_info}")

            document_name = str(doc_info.get("name", "–î–æ–∫—É–º–µ–Ω—Ç"))
            filename = str(doc_info.get("filename", "unknown.pdf"))

            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ='{document_name}', —Ñ–∞–π–ª='{filename}'")
            return document_name, filename
        else:
            logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")
            return "–î–æ–∫—É–º–µ–Ω—Ç", "unknown.pdf"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e}")
        return "–î–æ–∫—É–º–µ–Ω—Ç", "unknown.pdf"


def create_chat_interface() -> gr.Interface:
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º

    Returns:
        Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    with gr.Blocks(title="–ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º", theme=gr.themes.Soft()) as interface:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        header_markdown = gr.Markdown("# üìÑ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: –ó–∞–≥—Ä—É–∑–∫–∞...")
        file_info_markdown = gr.Markdown("**–§–∞–π–ª:** –ó–∞–≥—Ä—É–∑–∫–∞...")

        gr.Markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç")

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ (–≤–≤–µ—Ä—Ö—É)
        chat_area = gr.Chatbot(label="–ß–∞—Ç", height=400, show_label=True)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ (–≤–Ω–∏–∑—É)
        with gr.Row():
            with gr.Column(scale=4):
                # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_input = gr.Textbox(
                    label="–í–æ–ø—Ä–æ—Å",
                    placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ...",
                    lines=1,
                    max_lines=5,
                )

            with gr.Column(scale=1):
                # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_button = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", size="lg")

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
        clear_button = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary", size="sm")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        send_button.click(
            fn=send_message, inputs=[message_input], outputs=[message_input, chat_area]
        )

        message_input.submit(
            fn=send_message, inputs=[message_input], outputs=[message_input, chat_area]
        )

        clear_button.click(fn=clear_chat, outputs=[chat_area])

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        def load_document_info() -> tuple[str, str]:
            try:
                document_name, filename = get_document_info()
                header_text = f"# üìÑ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {document_name}"
                file_info_text = f"**–§–∞–π–ª:** `{filename}`"
                return header_text, file_info_text
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e}")
                return "# üìÑ –ß–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: –î–æ–∫—É–º–µ–Ω—Ç", "**–§–∞–π–ª:** `unknown.pdf`"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        interface.load(
            fn=load_document_info, outputs=[header_markdown, file_info_markdown]
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        interface.load(fn=load_chat_history, outputs=[chat_area])

    return interface


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    chat_interface = create_chat_interface()
    chat_interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True,
        show_error=True,
        quiet=True,
        max_threads=1,
        prevent_thread_lock=True,
    )
